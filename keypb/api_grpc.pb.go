// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package keypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyPushServiceClient is the client API for KeyPushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyPushServiceClient interface {
	SendKeyDiff(ctx context.Context, opts ...grpc.CallOption) (KeyPushService_SendKeyDiffClient, error)
}

type keyPushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyPushServiceClient(cc grpc.ClientConnInterface) KeyPushServiceClient {
	return &keyPushServiceClient{cc}
}

func (c *keyPushServiceClient) SendKeyDiff(ctx context.Context, opts ...grpc.CallOption) (KeyPushService_SendKeyDiffClient, error) {
	stream, err := c.cc.NewStream(ctx, &KeyPushService_ServiceDesc.Streams[0], "/keypb.KeyPushService/SendKeyDiff", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyPushServiceSendKeyDiffClient{stream}
	return x, nil
}

type KeyPushService_SendKeyDiffClient interface {
	Send(*SendKeyDiffRequest) error
	CloseAndRecv() (*SendKeyDiffResponse, error)
	grpc.ClientStream
}

type keyPushServiceSendKeyDiffClient struct {
	grpc.ClientStream
}

func (x *keyPushServiceSendKeyDiffClient) Send(m *SendKeyDiffRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keyPushServiceSendKeyDiffClient) CloseAndRecv() (*SendKeyDiffResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendKeyDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeyPushServiceServer is the server API for KeyPushService service.
// All implementations must embed UnimplementedKeyPushServiceServer
// for forward compatibility
type KeyPushServiceServer interface {
	SendKeyDiff(KeyPushService_SendKeyDiffServer) error
	mustEmbedUnimplementedKeyPushServiceServer()
}

// UnimplementedKeyPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyPushServiceServer struct {
}

func (UnimplementedKeyPushServiceServer) SendKeyDiff(KeyPushService_SendKeyDiffServer) error {
	return status.Errorf(codes.Unimplemented, "method SendKeyDiff not implemented")
}
func (UnimplementedKeyPushServiceServer) mustEmbedUnimplementedKeyPushServiceServer() {}

// UnsafeKeyPushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyPushServiceServer will
// result in compilation errors.
type UnsafeKeyPushServiceServer interface {
	mustEmbedUnimplementedKeyPushServiceServer()
}

func RegisterKeyPushServiceServer(s grpc.ServiceRegistrar, srv KeyPushServiceServer) {
	s.RegisterService(&KeyPushService_ServiceDesc, srv)
}

func _KeyPushService_SendKeyDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeyPushServiceServer).SendKeyDiff(&keyPushServiceSendKeyDiffServer{stream})
}

type KeyPushService_SendKeyDiffServer interface {
	SendAndClose(*SendKeyDiffResponse) error
	Recv() (*SendKeyDiffRequest, error)
	grpc.ServerStream
}

type keyPushServiceSendKeyDiffServer struct {
	grpc.ServerStream
}

func (x *keyPushServiceSendKeyDiffServer) SendAndClose(m *SendKeyDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keyPushServiceSendKeyDiffServer) Recv() (*SendKeyDiffRequest, error) {
	m := new(SendKeyDiffRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeyPushService_ServiceDesc is the grpc.ServiceDesc for KeyPushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyPushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keypb.KeyPushService",
	HandlerType: (*KeyPushServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendKeyDiff",
			Handler:       _KeyPushService_SendKeyDiff_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
